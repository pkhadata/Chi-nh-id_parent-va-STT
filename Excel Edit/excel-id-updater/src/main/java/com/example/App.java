package com.example;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;

public class App {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Nh·∫≠p STT b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t: ");
        int startStt = scanner.nextInt();

        String inputFile = "input.xlsx";   // ƒê·∫∑t file Excel g·ªëc ·ªü ƒë√¢y
        String outputFile = "output.xlsx"; // K·∫øt qu·∫£ sau x·ª≠ l√Ω

        FileInputStream fis = new FileInputStream(inputFile);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheetAt(0);

        // L∆∞u tr·ªØ th√¥ng tin c√°c d√≤ng h·ª£p l·ªá
        List<RowData> validRows = new ArrayList<>();
        Map<Integer, Integer> oldToNewIdMap = new HashMap<>();
        
        int totalRows = sheet.getLastRowNum();
        
        // B∆∞·ªõc 1: Thu th·∫≠p t·∫•t c·∫£ d√≤ng h·ª£p l·ªá (kh√¥ng null v√† c√≥ d·ªØ li·ªáu)
        for (int i = 1; i <= totalRows; i++) {
            Row row = sheet.getRow(i);
            if (row != null && row.getCell(2) != null) { // Ki·ªÉm tra d√≤ng v√† c·ªôt ID c√≥ t·ªìn t·∫°i
                try {
                    int oldId = (int) row.getCell(2).getNumericCellValue();
                    int oldParentId = row.getCell(3) != null ? (int) row.getCell(3).getNumericCellValue() : 0;
                    
                    RowData rowData = new RowData();
                    rowData.row = row;
                    rowData.oldId = oldId;
                    rowData.oldParentId = oldParentId;
                    
                    validRows.add(rowData);
                } catch (Exception e) {
                    // B·ªè qua d√≤ng c√≥ l·ªói d·ªØ li·ªáu
                    System.out.println("‚ö†Ô∏è B·ªè qua d√≤ng " + (i+1) + " do l·ªói d·ªØ li·ªáu");
                }
            }
        }
        
        // B∆∞·ªõc 2: C·∫≠p nh·∫≠t STT v√† t·∫°o mapping ID cho T·∫§T C·∫¢ d√≤ng
        int updatedCount = 0;
        for (int i = 0; i < validRows.size(); i++) {
            RowData rowData = validRows.get(i);
            int newStt = i + 1;  // STT m·ªõi
            
            // C·∫≠p nh·∫≠t STT
            rowData.row.getCell(0).setCellValue(newStt);
            
            // T·∫°o mapping cho T·∫§T C·∫¢ d√≤ng
            if (newStt >= startStt) {
                // C·∫≠p nh·∫≠t ID = STT cho d√≤ng >= startStt
                int newId = newStt;  
                rowData.newId = newId;
                oldToNewIdMap.put(rowData.oldId, newId);
                updatedCount++;
            } else {
                // Gi·ªØ nguy√™n ID c≈© cho d√≤ng < startStt, nh∆∞ng v·∫´n map
                rowData.newId = rowData.oldId;
                oldToNewIdMap.put(rowData.oldId, rowData.oldId);
            }
        }
        
        // B∆∞·ªõc 3: C·∫≠p nh·∫≠t ID v√† ID_Parent
        for (RowData rowData : validRows) {
            Row row = rowData.row;
            
            // C·∫≠p nh·∫≠t ID
            row.getCell(2).setCellValue(rowData.newId);
            
            // C·∫≠p nh·∫≠t ID_Parent
            int newParentId = 0;
            if (rowData.oldParentId != 0) {
                if (oldToNewIdMap.containsKey(rowData.oldParentId)) {
                    newParentId = oldToNewIdMap.get(rowData.oldParentId);
                    System.out.println("üîÑ Map Parent: " + rowData.oldParentId + " ‚Üí " + newParentId + 
                                     " (cho ID c≈© " + rowData.oldId + " ‚Üí m·ªõi " + rowData.newId + ")");
                } else {
                    newParentId = rowData.oldParentId; // Gi·ªØ nguy√™n n·∫øu kh√¥ng t√¨m th·∫•y
                    System.out.println("‚ö†Ô∏è Gi·ªØ nguy√™n Parent ID " + rowData.oldParentId + 
                                     " (kh√¥ng t√¨m th·∫•y mapping cho d√≤ng ID " + rowData.oldId + ")");
                }
            }
            row.getCell(3).setCellValue(newParentId);
        }

        fis.close();
        FileOutputStream fos = new FileOutputStream(outputFile);
        workbook.write(fos);
        fos.close();
        workbook.close();

        System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!");
        System.out.println("üìä T·ªïng s·ªë d√≤ng: " + validRows.size());
        System.out.println("üîÑ S·ªë d√≤ng ƒë√£ c·∫≠p nh·∫≠t ID: " + updatedCount + " (t·ª´ STT " + startStt + " tr·ªü xu·ªëng)");
        System.out.println("üíæ File k·∫øt qu·∫£: " + outputFile);
    }
    
    // Class helper ƒë·ªÉ l∆∞u th√¥ng tin d√≤ng
    static class RowData {
        Row row;
        int oldId;
        int oldParentId;
        int newId;
    }
}
